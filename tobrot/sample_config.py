import os

# DO NOT EDIT THIS FILE
# DO NOT EDIT THIS FILE
# DO NOT EDIT THIS FILE
# DO NOT EDIT THIS FILE

# READ README FOR CONFIG


class Config(object):
    # get a token from @BotFather
    TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN", "1641612309:AAGPMdSG76CTmXo7QQD9S0DXTXeeq54foMA")
    # The Telegram API things
    APP_ID = int(os.environ.get("APP_ID", "1309280"))
    API_HASH = os.environ.get("API_HASH", "af327dd857e0e65f80fefcf6d0af4afd")
    OWNER_ID = int(os.environ.get("OWNER_ID", "1243382770"))
    # Get these values from my.telegram.org
    # to store the channel ID who are authorized to use the bot
    AUTH_CHANNEL = set(int(x) for x in os.environ.get("AUTH_CHANNEL", "-1001454182978").split())
    # the download location, where the HTTP Server runs
    DOWNLOAD_LOCATION = "./DOWNLOADS"
    # Telegram maximum file upload size
    MAX_FILE_SIZE = 50000000
    TG_MAX_FILE_SIZE = 2097152000
    FREE_USER_MAX_FILE_SIZE = 50000000
    # chunk size that should be used with requests
    CHUNK_SIZE = int(os.environ.get("CHUNK_SIZE", 128))
    # default thumbnail to be used in the videos
    DEF_THUMB_NAIL_VID_S = os.environ.get("DEF_THUMB_NAIL_VID_S", "https://placehold.it/90x90")
    # maximum message length in Telegram
    MAX_MESSAGE_LENGTH = 4096
    # set timeout for subprocess
    PROCESS_MAX_TIMEOUT = 3600
    #
    SP_LIT_ALGO_RITH_M = os.environ.get(
        "SP_LIT_ALGO_RITH_M",
        "hjs"
    )
    ARIA_TWO_STARTED_PORT = int(os.environ.get("ARIA_TWO_STARTED_PORT", 6800))
    EDIT_SLEEP_TIME_OUT = int(os.environ.get("EDIT_SLEEP_TIME_OUT", 15))
    MAX_TIME_TO_WAIT_FOR_TORRENTS_TO_START = int(os.environ.get("MAX_TIME_TO_WAIT_FOR_TORRENTS_TO_START", 600))
    MAX_TG_SPLIT_FILE_SIZE = int(os.environ.get("MAX_TG_SPLIT_FILE_SIZE", 1072864000))
    # add config vars for the display progress
    FINISHED_PROGRESS_STR = os.environ.get("FINISHED_PROGRESS_STR", "üçè")
    UN_FINISHED_PROGRESS_STR = os.environ.get("UN_FINISHED_PROGRESS_STR", "üçé")
    # add offensive API
    TG_OFFENSIVE_API = os.environ.get("TG_OFFENSIVE_API", None)
    CUSTOM_FILE_NAME = os.environ.get("CUSTOM_FILE_NAME", "")
    LEECH_COMMAND = os.environ.get("LEECH_COMMAND", "leech@MyTorrentDrive_BOT")
    YTDL_COMMAND = os.environ.get("YTDL_COMMAND", "ytdl@MyTorrentDrive_BOT")
    RCLONE_CONFIG = os.environ.get("RCLONE_CONFIG", """type = drive
scope = drive
root_folder_id =
token = {"access_token":"ya29.A0AfH6SMCvaLMWW6iZacHYL43lGmR9QlSDfKXEFqCq52KTFmogEsc6EjFwcFIesczqQQNF52H9WVi1jGZgDWJF3R_19Rs-_hAcy7YeXIN-Tl3SNLB_dx4VmVPrGfvSJg3iACECKghtI4XTDBFZwtX8XD6esv9r","token_type":"Bearer","refresh_token":"1//0gdQV7KM1nnJrCgYIARAAGBASNwF-L9IralYTN1yMMrIcDDtrYLc4rBhVWENhbR-qJQxa1v0DzgfmUkYBtAW4PiZYoMqGx_IMObc","expiry":"2021-02-02T10:59:43.6364416+05:30"}
team_drive = 0AKZow1MUSd9aUk9PVA """)
    DESTINATION_FOLDER = os.environ.get("DESTINATION_FOLDER", "TorrentLeech-Gdrive")
    GLEECH_COMMAND = os.environ.get("GLEECH_COMMAND", "gleech@MyTorrentDrive_BOT")
    INDEX_LINK = os.environ.get("INDEX_LINK", "https://bold-scene-480b.satyu.workers.dev")
    TELEGRAM_LEECH_COMMAND_G = os.environ.get("TELEGRAM_LEECH_COMMAND_G", "tleech@MyTorrentDrive_BOT")
    CANCEL_COMMAND_G = os.environ.get("CANCEL_COMMAND_G", "cancel@MyTorrentDrive_BOT")
    GET_SIZE_G = os.environ.get("GET_SIZE_G", "getsize@MyTorrentDrive_BOT")
    STATUS_COMMAND = os.environ.get("STATUS_COMMAND", "status@MyTorrentDrive_BOT")
    SAVE_THUMBNAIL = os.environ.get("SAVE_THUMBNAIL", "savethumbnail@MyTorrentDrive_BOT")
    CLEAR_THUMBNAIL = os.environ.get("CLEAR_THUMBNAIL", "clearthumbnail@MyTorrentDrive_BOT")
    UPLOAD_AS_DOC = os.environ.get("UPLOAD_AS_DOC", "False")
    PYTDL_COMMAND_G = os.environ.get("PYTDL_COMMAND_G", "pytdl@MyTorrentDrive_BOT")
    LOG_COMMAND = os.environ.get("LOG_COMMAND", "log@MyTorrentDrive_BOT")
    CLONE_COMMAND_G = os.environ.get("CLONE_COMMAND_G", "gclone@MyTorrentDrive_BOT")
    UPLOAD_COMMAND = os.environ.get("UPLOAD_COMMAND", "upload@MyTorrentDrive_BOT")
    RENEWME_COMMAND = os.environ.get("RENEWME_COMMAND", "renewme@MyTorrentDrive_BOT")
